CREATE OR REPLACE STREAM "SOURCE_SQL_STREAM_001" (
                         COL_bidprice VARCHAR(3), 
                         Min_Price     double, 
                         Max_Price     double, 
                         Avg_Price     double);
CREATE OR REPLACE PUMP "STREAM_PUMP" AS 
   INSERT INTO "SOURCE_SQL_STREAM_001"
     SELECT STREAM COL_bidprice,
                   MIN(Price) OVER W1 AS Min_Price,
                   MAX(Price) OVER W1 AS Max_Price,
                   AVG(Price) OVER W1 AS Avg_Price
     FROM   "SOURCE_SQL_STREAM_001"
     WINDOW W1 AS (
        PARTITION BY COL_bidprice 
        RANGE INTERVAL '1' MINUTE PRECEDING); 

CREATE OR REPLACE STREAM "SOURCE_SQL_STREAM_001" (
                         COL_askprice VARCHAR(3), 
                         Min_Price     double, 
                         Max_Price     double, 
                         Avg_Price     double);
CREATE OR REPLACE PUMP "STREAM_PUMP" AS 
   INSERT INTO "SOURCE_SQL_STREAM_001"
     SELECT STREAM COL_askprice,
                   MIN(Price) OVER W1 AS Min_Price,
                   MAX(Price) OVER W1 AS Max_Price,
                   AVG(Price) OVER W1 AS Avg_Price
     FROM   "SOURCE_SQL_STREAM_001"
     WINDOW W1 AS (
        PARTITION BY COL_askprice 
        RANGE INTERVAL '1' MINUTE PRECEDING); 

-- ** Simple alert **
-- Emits rows matching criteria from sliding window aggregates
-- Useful for real-time monitoring use cases
CREATE OR REPLACE STREAM "SOURCE_SQL_STREAM_001" (
   !!!!!!, 
   avg_change double);
CREATE OR REPLACE PUMP "STREAM_PUMP" AS INSERT INTO "SOURCE_SQL_STREAM_001"
SELECT STREAM COL_bidprice, avg_change
FROM (
    SELECT STREAM
        ticker_symbol, 
        AVG(change) OVER W1 as avg_change
    FROM "SOURCE_SQL_STREAM_001"
    WINDOW W1 AS (PARTITION BY ticker_symbol RANGE INTERVAL '10' SECOND PRECEDING)
)
WHERE ABS(avg_change) > 1;
